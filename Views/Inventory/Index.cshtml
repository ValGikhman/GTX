@model GTX.Models.BaseModel

<!-- Scrollable wrapper -->
<div class="inventory-wrapper mx-4">
    @if (Model.Inventory.Vehicles.Count() > 0) {
        @Html.Partial("_FilterByTerm");
    }
    <ul id="inventory" class="d-flex flex-wrap justify-content-center gap-3">
        @{
            if (Model.Inventory.Vehicles != null) {
                foreach (var vehicle in Model.Inventory.Vehicles) {
                    @Html.Partial("_Card", vehicle)
                }
            }
            else {
                <li>
                    <h6 class="well shadow-lg p-3">No vehicles found....</h6>
                </li>
            }
        }
    </ul>
</div>

<script type="text/javascript">
    $(function () {
        const term = sessionStorage.getItem("term");
        if (term === undefined || term === "" || term === null) {
            sessionStorage.removeItem("term");
        }
        else {
            $("#filterTerm").val(term);
            applyFilterTerm(term);
        }

        // For navivation on details page
        let stocks = $(".card:visible").map(function () {
            return $(this).data("stock");
        }).get();

        if (stocks.length > 0) {
            localStorage.setItem("matchedStocks", JSON.stringify(stocks));
            sessionStorage.setItem("lastVisitedPage", window.location.href);
        } else {
            localStorage.removeItem("matchedStocks"); // Clear old if none matched
            sessionStorage.removeItem("lastVisitedPage");

        }

        $(window).on('pageshow', function (event) {
            loadLastCars();
            loadLikedCars();
            refreshCarLikes();
        });

        $(".card").on("click", function () {
            const stock = $(this).data("stock");
            if (stock) {
                window.location.href = `${root}Inventory/Details?stock=${stock}`
            }
        });

        $(".no-click").on("click", function (e) {
            e.stopPropagation();
        });

        refreshCarLikes();

        $('#sortField, #sortDirection').on('change', sortInventory);
    })

    function refreshCarLikes() {
        $(".card").each(function () {
            var stock = $(this).data("stock");
            if (isCarLiked(stock)) {
                $(this).find(".liked").show();
            }
            else {
                $(this).find(".liked").hide();
            }
        });
    }

    function sortInventory() {
        var field = $('#sortField').val();
        var desc = $('#sortDirection').is(':checked');
        var $container = $('#inventory');

        if (!field) return; // Do nothing if no field selected

        var $items = $container.find('.card').get();
        var isTextField = (field === 'make');
        var collator = new Intl.Collator(undefined, { sensitivity: 'base', numeric: true });

        $items.sort(function (a, b) {
            var rawA = $(a).data(field);
            var rawB = $(b).data(field);

            if (isTextField) {
                var valA = (rawA == null ? '' : String(rawA));
                var valB = (rawB == null ? '' : String(rawB));
                var cmp = collator.compare(valA, valB);
                return desc ? -cmp : cmp;
            } else {
                // Clean numbers like "$12,345.00" -> 12345.00
                var numA = parseFloat(String(rawA).replace(/[^0-9.\-]/g, '')) || 0;
                var numB = parseFloat(String(rawB).replace(/[^0-9.\-]/g, '')) || 0;
                var cmp = numA - numB;
                return desc ? -cmp : cmp;
            }
        });

        $container.append($items);
    }
</script>
