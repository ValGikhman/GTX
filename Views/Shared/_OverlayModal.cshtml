@model Services.Image
@using System.Drawing
@using System.Reflection
@using System.Text.Json;

@{
    var colorProperties = typeof(Color).GetProperties(BindingFlags.Static | BindingFlags.Public)
                                       .Where(p => p.PropertyType == typeof(Color))
                                       .Select(p => p.Name)
                                       .OrderBy(name => name)
                                       .ToList();

}

<div class="modal-header">
    <h5 class="modal-title text-white" id="overlayTitle">
    </h5>
    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
</div>

<div class="d-flex flex-wrap align-items-start m-2 gap-1">
    <div class="modal-body overlay-image-container shadow rounded m-3 col-3">
        @{
            string imagePath = $"/GTXImages/Inventory/{Model.Stock.Trim()}/{Model.Name}";
            <img src="@imagePath" class="d-block mx-auto rounded" alt="@imagePath" />
            <div id="overlay" class="overlay-image-overlay rounded-bottom">
                <p class="overlay-text">Double click to edit.... </p>
            </div>
        }
    </div>
    <div class="col-3 mx-3">
        @Html.Label("Text color", new { @class = "text-shadow" })
        <select id="textColor" class="form-select shadow">
            <option selected disabled>Choose a color</option>
            @foreach (var colorName in colorProperties) {
                var color = Color.FromName(colorName);
                if (color.IsKnownColor) {
                    <option value="@colorName.ToLower()" style="color: @colorName;">@colorName</option>
                }
            }
        </select>

        @Html.Label("Background color", new { @class = "text-shadow mt-3" })
        <select id="backgroundColor" class="form-select shadow">
            <option selected disabled>Choose a background</option>
            @foreach (var colorName in colorProperties) {
                var color = Color.FromName(colorName);
                if (color.IsKnownColor) {
                    <option value="@colorName.ToLower()" style="color: @colorName;">@colorName</option>
                }
            }
        </select>

        @Html.Label("Font type", new { @class = "text-shadow mt-3" })
        <select id="fontType" class="form-select shadow">
            <option value="normal">Normal</option>
            <option value="bold">Bold</option>
            <option value="italic">Italic</option>
            <option value="bolditalic">Bold + Italic</option>
        </select>

        @Html.Label("Font size", new { @class = "text-shadow mt-3" })
    <select id="fontSize" class="form-select shadow">
        <option value="1vw">x1</option>
        <option value="2vw">x2</option>
        <option value="3vw">x3</option>
    </select>
    </div>
</div>

<div class="modal-footer well shadow">
    <div class="container-fluid">
        <button id="deleteOverlay" type="button" class="btn btn-danger shadow"><i class="bi bi-trash flex"></i>&nbsp;Delete overlay</button>
        <span class="pull-right">
            <button id="close" type="button" class="btn btn-close-white shadow" data-bs-dismiss="modal"><i class="bi bi-x-lg flex"></i>&nbsp;Close</button>
            <button id="saveOverlay" type="button" class="btn btn-secondary shadow mx-3"><i class="bi bi-save2 flex"></i>&nbsp;Save overlay</button>
        </span>
    </div>
</div>

<script type="text/javascript">
    var id = "@Model.Id";
    var stock = "@Model.Stock.Trim()"
    var imagePath = `${images}@Model.Stock.Trim()/@Model.Name`;
    var overlay = @Html.Raw(Json.Encode(Model.Overlay));

    if (overlay) {
        wearOverlay(overlay);
        setControls(overlay);
    }
    else {
        $("#fontSize").val("3vw").trigger("change");
        $("#fontType").val("normal").trigger("change");
        $("#textColor").val("white").trigger("change");
        $("#backgroundColor").val("black").trigger("change")

        $(".overlay-text").css("color", "white");
        $(".overlay-image-overlay").css("background-color", "black");
        $(".overlay-text").css("font-size", "3vw");
        $(".overlay-text").css({
            "font-weight": "bold",
            "font-style": "normal"
        });

    }

    $(function () {
        $(document).on("dblclick", ".overlay-text", function () {
            const currentText = $(this).text();

            // Replace <p> with <input>
            const $input = $('<input type="text" class="form-control shadow" id="text" placeholder="Enter or edit description">').val(currentText);
            $(this).replaceWith($input);
            $input.focus().select();

            // On blur or enter, replace back with <p>

            $input.on('blur keydown', function (e) {
                if (e.type === 'blur' || e.key === 'Enter') {
                    const newText = $(this).val();
                    const $p = $('<p id="overlay-text" class="overlay-text"></p>').text(newText);
                    $(this).replaceWith($p);
                    $(this).css("font-size", $("#fontSize").val());
                    $(this).css("color", $("#textColor").val());
                    $(".overlay-image-overlay").css("background-color", $("#backgroundColor").val());
                }
            });
        });

        var car = `${selectedVehicle.Year}-${selectedVehicle.Make} ${selectedVehicle.Model} ${selectedVehicle.VehicleStyle}`;
        $("#overlayTitle").html(car);

        $("#saveOverlay").on("click", function () {
            saveOverlayData();
        })


        $("#deleteOverlay").on("click", function () {
            if (confirm(`Do you want to delete overlay for this image`)) {
                deleteOverlayData();
            }
        })

        $("#text").on("input", function () {
            $(".overlay-text").text($(this).val());
        })

        $("#textColor").on("change", function () {
            $(".overlay-text").css("color", $(this).val());
        })

        $("#backgroundColor").on("change", function () {
            const color = $(this).val();
            $(".overlay-image-overlay").css("background-color", color);
        })

        $("#fontSize").on("change", function () {
            const size = $(this).val();
            $(".overlay-text").css("font-size", `${size}`);
        })

        $("#fontType").on("change", function () {
            const selected = $(this).val();
            const $text = $(".overlay-text");

            $text.css({
                "font-weight": "normal",
                "font-style": "normal"
            });

            // Apply selected style
            if (selected === "bold") {
                $text.css("font-weight", "bold");
            } else if (selected === "italic") {
                $text.css("font-style", "italic");
            } else if (selected === "bolditalic") {
                $text.css({
                    "font-weight": "bold",
                    "font-style": "italic"
                });
            }
        })
    });
</script>

