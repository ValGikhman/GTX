﻿@using Newtonsoft.Json
@model GTX.Models.ContactModel

<style>
    .just-validate-error-field {
        border: 1px solid red !important;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='red' viewBox='0 0 24 24'%3E%3Cpath d='M12 2a10 10 0 100 20 10 10 0 000-20zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 24px;
    }

    .just-validate-success-field {
        border: 1px solid green;
        background-image: url('data:image/svg+xml;utf8,<svg fill="green" viewBox="0 0 24 24" width="16" xmlns="http://www.w3.org/2000/svg"><path d="M9 16.17l-4.17-4.17L3.59 13.59 9 19l12-12-1.41-1.41z"/></svg>');
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 24px;
    }

    .just-validate-error-label {
        flex: 0 0 100%; /* full row */
        font-size: 12px;
        margin-top: -1.6rem !important;
        z-index: 99;
    }
</style>

<script src="~/Scripts/jquery/jquery.mask.js" type="text/javascript"></script>
<form id="contactForm" name="contactForm" novalidate autocomplete="off" class="w-100">
    <div id="contactSpinner" class="spinner-overlay spinner-hidden">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    @* First Name *@
    <div class="mb-2">
        <div class="input-group">
            <span class="input-group-text shadow">
                <i class="bi bi-file-person"></i>
            </span>
            @Html.TextBoxFor(model => model.FirstName, new { @name = "FirstName", @class = "form-control shadow", placeholder = "First Name" })
        </div>
    </div>

    @* Last Name *@
    <div class="mb-2">
        <div class="input-group">
            <span class="input-group-text shadow">
                <i class="bi bi-file-person-fill"></i>
            </span>
            @Html.TextBoxFor(model => model.LastName, new { @name = "LastName", @class = "form-control shadow", placeholder = "Last Name" })
        </div>
    </div>

    @* Email *@
    <div class="mb-2">
        <div class="input-group">
            <span class="input-group-text shadow">
                <i class="bi bi-mailbox"></i>
            </span>
            @Html.TextBoxFor(model => model.Email, new { @name = "Email", @class = "form-control shadow", placeholder = "Email" })
        </div>
    </div>

    @* Phone *@
    <div class="mb-2">
        <div class="input-group">
            <span class="input-group-text shadow">
                <i class="bi bi-phone"></i>
            </span>
            @Html.TextBoxFor(model => model.Phone, new { @name = "Phone", @class = "form-control shadow", placeholder = "Phone", type = "phone" })
        </div>
    </div>

    @* Date & Time *@
    <div class="mb-2">
        <div class="input-group">
            <span class="input-group-text shadow"><i class="bi bi-calendar"></i></span>
            @Html.TextBoxFor(m => m.PreferredDate, new { @name = "PreferredDate", @class = "form-control shadow", placeholder = "Preferred date and time" })
            @Html.TextBoxFor(m => m.PreferredTime, new { @type = "time", @class = "form-control shadow", step = "900", min = "09:00", max = "18:30", list = "timeOptions", placeholder = "Preferred time" })
        </div>
        <datalist id="timeOptions">
            <option value="09:00"></option>
            <option value="09:30"></option>
            <option value="10:00"></option>
            <option value="10:30"></option>
            <option value="11:00"></option>
            <option value="11:30"></option>
            <option value="12:00"></option>
            <option value="12:30"></option>
            <option value="13:00"></option>
            <option value="13:30"></option>
            <option value="14:00"></option>
            <option value="14:30"></option>
            <option value="15:00"></option>
            <option value="15:30"></option>
            <option value="16:00"></option>
            <option value="16:30"></option>
            <option value="17:00"></option>
            <option value="17:30"></option>
            <option value="18:00"></option>
            <option value="18:30"></option>
        </datalist>
    </div>

    @* Comments *@
    <div class="mb-2">
        @Html.TextAreaFor(model => model.Comment, new { @name = "Comment", @class = "form-control shadow", @style = "height: 150px;", placeholder = "Leave a request here" })
    </div>

    <input type="hidden" id="EmployerId" value="@Model.EmployerId" />
    <div class="d-flex justify-content-center p-3">
        <button id="btnSent" type="submit" class="btn gradient rounded-5 border-dark shadow w-75"><i class="bi bi-send"></i> Send</button>
    </div>
    @{
        if (Model.CurrentVehicle != null && Model.CurrentVehicle.VehicleDetails != null) {
            var stock = Model.CurrentVehicle.VehicleDetails.Stock;
            <input type="hidden" id="Stock" value="@stock" />
        }
    }
</form>


<script>
    (function () {
        $(document).on("click", ".just-validate-error-label", function (e) {
            e.stopPropagation();
            $(this).hide();
        });

        $("#Phone").mask("(000) 000-0000");

        $("#PreferredDate").datepicker({
            showOtherMonths: true,
            selectOtherMonths: true,
            dateFormat: "yy-mm-dd",
            minDate: 1,              // tomorrow
            maxDate: "+1M"        // one month out
        });

        const validator = new JustValidate('#contactForm', {
            validateBeforeSubmitting: true,
            focusInvalidField: true
        });

        validator
            .addField('#FirstName', [
                { rule: 'required', errorMessage: 'First name is required' }
            ])
            .addField('#LastName', [
                { rule: 'required', errorMessage: 'Last name is required' }
            ])
            .addField('#Email', [
                { rule: 'required', errorMessage: 'Email is required' },
                {
                    validator: value => /^[\w-\.]+@@([\w-]+\.)+[\w-]{2,4}$/.test(value.trim()),
                    errorMessage: 'Email is invalid format',
                }
            ])
            .addField('#Phone', [
                { rule: 'required', errorMessage: 'Phone required' },
                {
                    validator: value => /^\(?([0-9]{3})\)?[- ]?([0-9]{3})[- ]?([0-9]{4})$/.test(value.trim()),
                    errorMessage: 'Invalid phone format',
                }
            ])
            .addField('#Comment', [
                { rule: 'required', errorMessage: 'Comment is required' }
            ]);

        $("#btnSent").on("click", function () {
            if (validator.isValid) {
                send();
                setTimeout(() => {
                    $("#FirstName, #LastName, #Email, #Phone, #PreferredDate, #PreferredTime, #Comment").val("");
                    validator.refresh();
                }, 1000);
            }
            else {
                console.log('❌ Form has validation errors');
            }
        });

    })()

    function send() {
        showSpinner($("#contactSpinner"));
        const model = {
            FirstName: $("#FirstName").val()?.trim(),
            LastName: $("#LastName").val()?.trim(),
            Email: $("#Email").val()?.trim(),
            Phone: $("#Phone").val()?.trim(),
            PreferredDate: $("#PreferredDate").val()?.trim(),
            PreferredTime: $("#PreferredTime").val()?.trim(),
            Comment: $("#Comment").val()?.trim(),
            EmployerId: $("#EmployerId").val()?.trim()
        };

        sendContact(model);
    }

    function sendContact(model) {
        fetch("/Home/SendContact", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(model)
        })
            .then(res => {
                if (!res.ok) return res.json().then(err => { throw err; });
                return res.json();
            })
            .then(data => {
                console.log("✅ Server response:", data);
            })
            .catch(err => {
                console.warn("❌ Server responded with an error", err);
            })
            .finally(() => {
                hideSpinner($("#contactSpinner"));
            });
    }
</script>
