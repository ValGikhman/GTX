@using Newtonsoft.Json
@model GTX.Models.ContactUs
<style>
    .just-validate-error-field {
        border: 1px solid red!important;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='red' viewBox='0 0 24 24'%3E%3Cpath d='M12 2a10 10 0 100 20 10 10 0 000-20zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 24px;
    }

    .just-validate-success-field {
        border: 1px solid green;
        background-image: url('data:image/svg+xml;utf8,<svg fill="green" viewBox="0 0 24 24" width="16" xmlns="http://www.w3.org/2000/svg"><path d="M9 16.17l-4.17-4.17L3.59 13.59 9 19l12-12-1.41-1.41z"/></svg>');
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 24px;
    }

    .just-validate-error-label {
        font-size: 12px;
        margin-left: 13px;
    }
</style>
<script src="~/Scripts/jquery/jquery.mask.js" type="text/javascript"></script>
<form id="contactForm" name="contactForm" novalidate autocomplete="off" class="w-100">
    <div class="mb-2">
        @Html.TextBoxFor(model => model.FirstName, new {@name="FirstName", @class = "form-control shadow", placeholder = "First Name"})
        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-shadow-small" })
    </div>

    <div class="mb-2">
        @Html.TextBoxFor(model => model.LastName, new { @name = "LastName",  @class = "form-control shadow", placeholder = "Last Name"})
        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-shadow-small" })
    </div>

    <div class="mb-2">
        @Html.TextBoxFor(model => model.Email, new { @name = "Email", @class = "form-control shadow", placeholder = "Email"})
        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-shadow-small" })
    </div>

    <div class="mb-2">
        @Html.TextBoxFor(model => model.Phone, new { @name="Phone", @class = "form-control shadow", placeholder = "Phone", type = "phone" })
        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-shadow-small" })
    </div>

    <div class="form-floating">
        @Html.TextAreaFor(model => model.Comment, new {@name="Comment", @class = "form-control shadow", @style = "height: 150px;", placeholder = "Leave a comment here" })
        @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-shadow-small" })
    </div>

    <div class="d-flex justify-content-center p-3">
        <button id="btnSent" type="submit" class="btn btn-secondary shadow w-50"><i class="bi bi-send"></i> Send</button>
    </div>
</form>

<script>
    (function () {
        $("#Phone").mask("(000) 000-0000");

        const validator = new JustValidate('#contactForm', {
            validateBeforeSubmitting: true,
            focusInvalidField: true
        });

        validator
            .addField('#FirstName', [
                { rule: 'required', errorMessage: 'First name is required' }
            ])
            .addField('#LastName', [
                { rule: 'required', errorMessage: 'Last name is required' }
            ])
            .addField('#Email', [
                { rule: 'required', errorMessage: 'Email is required' },
                { rule: 'email', errorMessage: 'Email is invalid' }
            ])
            .addField('#Phone', [
                { rule: 'required', errorMessage: 'Phone required' },
                {
                    validator: value => /^\+?[\d\s\-().]{10,20}$/.test(value.trim()),
                    errorMessage: 'Invalid phone format',
                }
            ])
            .addField('#Comment', [
                { rule: 'required', errorMessage: 'Comment is required' }
            ]);

        $("#btnSent").on("click", function () {
            if (validator.isValid) {
                send();
            }
            else {
                console.log('❌ Form has validation errors');
            }
        });
    })()

    function send() {
        const model = {
            FirstName: $('#FirstName').val(),
            LastName: $('#LastName').val(),
            Email: $('#Email').val(),
            Phone: $('#Phone').val(),
            Comment: $('#Comment').val()
        };
        console.log(model);

        sendContact(model);
    }

    function sendContact(model) {
        fetch('/Home/SendContact', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(model)
        })
        .then(response => {
            if (!response.ok) throw new Error("Server error");
            return response.json();
        })
        .then(data => {
            console.log("✅ Server response:", data);
            setTimeout(() => {
                $('#FirstName').val("");
                $('#LastName').val("");
                $('#Email').val("");
                $('#Phone').val("");
                $('#Comment').val("");

                validator.refresh();
                validator = null;
            }, 1000);
        })
        .catch(error => {
            console.log("❌ Error submitting:", error);
        });
    }
</script>
