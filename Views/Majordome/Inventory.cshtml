@model GTX.Models.BaseModel
<head>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui-touch-punch/0.2.3/jquery.ui.touch-punch.min.js"></script>
    <script src="~/Scripts/just- validate/just-validate.production.min.js"></script>
    <script src="~/Scripts/majordome.js"></script>

    <style>
        .body-content {
            height: 100%;
            margin-top: 5rem;
        }
    </style>


    <!-- Includes all JS & CSS for the JavaScript Data Grid -->
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community@31.3.1/dist/ag-grid-community.min.js"></script>

    <!-- Lightbox2 JS -->
    <link href="https://cdn.jsdelivr.net/npm/lightbox2@2/dist/css/lightbox.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/lightbox2@2/dist/js/lightbox.min.js"></script>
    <script src="https://cdn.tiny.cloud/1/okduuxn2eosmoqo3ssyfokh7d79xg1u9w40g9d9yid9lnf8t/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>

    <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
</head>

<h2 class="text-center">@ViewBag.Title</h2>

<div id="inventoryOverlay" class="spinner-overlay spinner-hidden">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Working...</span>
    </div>
</div>

<!-- Modal -->
<div class="modal modal-xl" id="overlayModal" data-bs-keyboard="true" tabindex="-1" aria-labelledby="overlayModal" aria-hidden="true">
    <div class=" modal-dialog modal-dialog-centered">
        <div id="vehicle-overlay" class="modal-content">
        </div>
    </div>
</div>

<div class="container-fluid">
    <nav class="nav nav-tabs no-wrap-group" id="myTab" role="tablist">
        <button class="nav-link btn btn-light text-shadow-small active" id="inventory-tab" data-bs-toggle="tab" data-bs-target="#inventory" type="button" role="tab">
            Inventory
        </button>
        <button class="nav-link btn btn-light text-shadow-small" id="details-tab" data-bs-toggle="tab" data-bs-target="#details" type="button" role="tab">
            Details
        </button>
        <button class="nav-link btn btn-light text-shadow-small" id="galery-tab" data-bs-toggle="tab" data-bs-target="#galery" type="button" role="tab">
            Galery
        </button>
    </nav>

    <div class="tab-content border border-top-0 well " id="myTabContent">
        <!-- Inventory Tab -->
        <div class="tab-pane fade show active pt-2" id="inventory" role="tabpanel">
            <div id="myGrid" class="ag-theme-alpine mx-auto" style="height: 580px; width: 1270px;">
                <div>
                    @{ Html.RenderPartial("_FilterByTerm"); }
                </div>
            </div>
        </div>
        <!-- Details Tab -->
        <div class="tab-pane fade" id="details" role="tabpanel">
            <div class="row">
                <!-- Left Column: Form -->
                <div class="col-md-7">
                    <div class="row col-lg-4">
                        @Html.Label("VIN", new { @class = "text-shadow" })
                        <div class="input-group mb-2">
                            <input id="vin" class="form-control shadow" placeholder="VIN" aria-label="VIN" aria-describedby="vin" />
                            <button id="decode" class="btn btn-light bi bi-search input-group-text "></button>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="mb-2 col-lg-2">
                            @Html.Label("Stock", new { @class = "text-shadow" })
                            <input id="stock" class="form-control shadow" placeholder="Style" />
                        </div>
                        <div class="mb-2 col-lg-1">
                            @Html.Label("Year", new { @class = "text-shadow" })
                            <input id="year" class="form-control shadow" placeholder="Year" />
                        </div>
                        <div class="mb-2 col-lg-3">
                            @Html.Label("Make", new { @class = "text-shadow" })
                            <input id="make" class="form-control shadow" placeholder="Make" />
                        </div>
                        <div class="mb-2 col-lg-2">
                            @Html.Label("Model", new { @class = "text-shadow" })
                            @Html.Label("Model", new { @class = "text-shadow" })
                            <input id="model" class="form-control shadow" placeholder="Model" />
                        </div>
                        <div class="mb-2 col-lg-2">
                            @Html.Label("Style", new { @class = "text-shadow" })
                            <input id="style" class="form-control shadow" placeholder="Style" />
                        </div>
                        <div class="mb-2 col-lg-2">
                            @Html.Label("Type", new { @class = "text-shadow" })
                            <input id="type" class="form-control shadow" placeholder="Type" />
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="mb-2 col-lg-6">
                            @Html.Label("Mileage", new { @class = "text-shadow" })
                            <input id="mileage" class="form-control shadow" placeholder="Mileage" />
                        </div>
                        <div class="mb-2 col-lg-6">
                            @Html.Label("Price", new { @class = "text-shadow" })
                            <input id="price" class="form-control shadow" placeholder="Price" />
                        </div>
                    </div>
                    <div class="d-flex justify-content-center pt-5">
                        <button id="saveDetails" type="submit" class="btn btn-secondary shadow w-25"><i class="bi bi-send"></i>Save</button>
                    </div>
                </div>
                <div class="col-md-5 text-shadow-small">
                    <div class="row">
                        @Html.Label("Title", new { @class = "text-shadow" })
                        <div class="input-group mb-3">
                            <input id="title" class="form-control shadow pull-right" placeholder="Title" aria-label="Title" aria-describedby="title" />
                            <button id="createStory" class="btn btn-light bi bi-book input-group-text "></button>
                            <button id="saveStory" class="btn btn-light bi bi-save input-group-text"></button>
                        </div>
                    </div>
                    <div class="row mt-2">
                        @Html.Label("Story", new { @class = "text-shadow" })
                        <textarea id="story" class="form-control shadow">
                    </textarea>
                    </div>
                </div>
            </div>
        </div>

        <!-- Gallery Tab -->
        <div class="tab-pane fade  d-flex flex-column align-items-center" id="galery" role="tabpanel">
            <div class="d-flex justify-content-center w-100 p-3">
                <button id="upload" class="btn btn-light shadow mx-2 bi bi-upload">&nbsp;Upload images</button>
                <button id="deleteAll" class="btn btn-light shadow bi bi-trash">&nbsp;Delete all images</button>
                <input type="file" id="fileInput" class="d-none" multiple accept="image/*">
            </div>
            <div id="galery-content" class="flex-grow-1 w-100 px-3 pb-3">
                <ul id="sortable-gallery" class="row justify-content-center">
                    <!-- li items here -->
                </ul>
            </div>
        </div>
    </div>
</div>

<template id="actions">
    <button type="button" id="btnReStoryAll" class="btn btn-light shadow">Restory all</button>
</template>

<input type="hidden" id="currentVehicle" />
<script type="text/javascript">

$(function () {
    var grid = document.querySelector('#myGrid');
    agGrid.createGrid(grid, gridOptions);

    $(document).on("click", ".delete-image", function () {
        var file = $(this).data("filename");
        var id = $(this).attr("id");
        if (confirm(`Do you want to delete this file?`)) {
            deleteImage(id, file, this);
        }
    });

    $(document).on("click", ".remove-background", function () {
        var file = $(this).data("filename");
        var id = $(this).attr("id");
        if (confirm(`Do you want to remove background for this file?`)) {
            removeBackground(file);
        }
    });

    $(document).on("click", ".overlay-image", function () {
        var id = $(this).attr("id");
        showOverlayModal(id);
    });

    $(document).on("click", ".move-to-top", function (e) {
        e.stopPropagation();

        const $this = $(this);
        const $item = $this.closest("li");

        // Move this item to the top
        $item.prependTo("#sortable-gallery");

        const sorted = getSortedIds();
        saveOrder(sorted, stock)
        updateGalleryDisplay();
    });

    function getSortedIds() {
        return $("#sortable-gallery li").map(function () {
            return $(this).attr("id");
        }).get();
    }

    $(".ag-column-last").html($("#actions").html());

    $("#btnReStoryAll").on("click", function () {
        reStoryAll();
    });

    $("#filterLiked").hide();
    $(".sort").hide();

    $("#upload").on("click", function () {
        $('#fileInput').click();
    });

    $("#deleteAll").on("click", function () {
        const stock = selectedVehicle.Stock;
        if (confirm(`Deleting all images for Stock# ${stock}`)) {
            deleteImages(stock);
        }
    });

    $("#createStory").on("click", function () {
        const stock = selectedVehicle.Stock;
        if (confirm(`Do you want to create story for Stock# ${stock}`)) {
            createStory(stock);
        }
    });

    $("#saveStory").on("click", function () {
        const stock = selectedVehicle.Stock;
        var story = tinymce.get('story').getContent();
        const title = $("#title").val();
        if (confirm(`Do you want to save story for Stock# ${stock}`)) {
            showSpinner($("#inventoryOverlay"));

            fetch('/Majordome/SaveStory', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ stock, story, title })
            })
            .then(response => {
                if (!response.ok) throw new Error("Server error");
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    console.log("✅ Story saved:", data.message);
                    fetch('/Majordome/GetUpdatedItems')
                        .then(res => res.json())
                        .then(data => {
                            updateRow(data);
                    });
                } else {
                    console.log("❌ Server returned error:", data.message);
                }
            })
            .catch(error => {
                console.log("❌ Error submitting:", error);
            });
        }
    });

    $("#fileInput").on("change", function () {
        const files = Array.from(fileInput.files);
        const stock = selectedVehicle.Stock;

        if (files.length > 0) {
            uploadFiles(stock, fileInput);
        }
    });

    $("#vin")
        .on("blur", function () {
            const vin = $(this).val();
            if (vin.length > 0) {
                decodeVin(vin);
            }
        })
        .on("keydown", function (e) {
            if (e.key === "Enter") {
                e.preventDefault();
                const vin = $(this).val();
                if (vin.length > 0) {
                    decodeVin(vin);
                }
            }
        }).focus();

    new Sortable(document.getElementById("sortable-gallery"), {
        scroll: true,
        scrollSensitivity: 30,
        scrollSpeed: 20,
        animation: 150,
        ghostClass: "sortable-gallery-ghost",
        chosenClass: "sortable-gallery-chosen",
        dragClass: "sortable-gallery-drag",
        delay: 100,
        touchStartThreshold: 5,
        onEnd: function (event) {
            let sorted = $("#sortable-gallery li").map(function () {
                return $(this).attr("id")
            }).get();
            saveOrder(sorted, selectedVehicle.Stock);
            updateGalleryDisplay();
        }
    });

    tinymce.init({
        selector: '#story',
        height: 560,
        menubar: 'file edit view insert format customMenu', // add your custom menu here
        setup: function (editor) {
            editor.on('init', function () {
                editor.setContent(selectedVehicle.Story?.HtmlContent || '');
            });
        },
        plugins: [
            // Core editing features
            'anchor', 'autolink', 'charmap', 'codesample', 'emoticons', 'image', 'link', 'lists', 'media', 'searchreplace', 'visualblocks'
        ],
        toolbar: '',

        tinycomments_mode: 'embedded'
    });
});

let gridApi = null;

const columnDefs = [
    {
        field: 'images',
        cellRenderer: imageButtonRenderer,
        filter: false,
        sortable: false,
        width: 400,
        cellClass: 'd-flex align-items-center'
    },
    {
        headerName: "Vehicle",
        filter: false,
        width: 350,
        field: "Vehicle", // You can use any placeholder field
        autoHeight: true,
        sortable: true,
        comparator: (valueA, valueB, nodeA, nodeB) => {
            const a = `${nodeA.data.Year} ${nodeA.data.Make} ${nodeA.data.Model}`.toLowerCase();
            const b = `${nodeB.data.Year} ${nodeB.data.Make} ${nodeB.data.Model}`.toLowerCase();

            if (a < b) return -1;
            if (a > b) return 1;
            return 0;
        },
        cellRenderer: (params) => {
            const { Year, Make, Model, VehicleStyle, Mileage, RetailPrice } = params.data;
            var formattedPrice = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
            }).format(RetailPrice);

            var formattedMileage = new Intl.NumberFormat('en-US').format(Mileage);
            return `
                <div><h5>${Year} ${Make} ${Model} ${VehicleStyle}</h5></div>
                <div class="row mt-2" style="scale: 0.75; margin-left: -60px;">
                    <div class="d-flex flex-wrap justify-content-evenly rounde gap-4">
                        <span class="btn btn-outline-secondary shadow position-relative details">
                            <span class="medium-small-text">${params.data.LocationCode}</span>
                            <span class="detail-badge position-absolute start-50 translate-middle shadow badge rounded bg-secondary">
                                Code
                            </span>
                        </span>
                        <span class="btn btn-outline-secondary shadow position-relative details">
                            <span class="medium-small-text">${formattedPrice}</span>
                            <span class="detail-badge position-absolute start-50 translate-middle shadow badge rounded bg-secondary">
                                Price
                            </span>
                        </span>
                        <span class="btn btn-outline-secondary shadow position-relative details">
                            <span class="medium-small-text">${formattedMileage}</span>
                            <span class="detail-badge position-absolute start-50 translate-middle shadow badge rounded bg-secondary">
                                Miles
                            </span>
                        </span>
                        <span class="btn btn-outline-secondary shadow position-relative details">
                            <span class="medium-small-text">${params.data.Engine}</span>
                            <span class="detail-badge position-absolute start-50 translate-middle shadow badge rounded bg-secondary">
                                Engine
                            </span>
                        </span>
                        <span class="btn btn-outline-secondary shadow position-relative details">
                            <span class="medium-small-text">${params.data.Body}</span>
                            <span class="detail-badge position-absolute start-50 translate-middle shadow badge rounded bg-secondary">
                                Body
                            </span>
                        </span>
                        <span class="btn btn-outline-secondary shadow position-relative details">
                            <span class="medium-small-text">${params.data.VehicleType}</span>
                            <span class="detail-badge position-absolute start-50 translate-middle shadow badge rounded bg-secondary">
                                Type
                            </span>
                        </span>
                        <span class="btn btn-outline-secondary shadow position-relative details">
                            <span class="medium-small-text">${params.data.Cylinders}</span>
                            <span class="detail-badge position-absolute start-50 translate-middle shadow badge rounded bg-secondary">
                                Cylinders
                            </span>
                        </span>
                        <span class="btn btn-outline-secondary shadow position-relative details">
                            <span class="medium-small-text">${params.data.DriveTrain}</span>
                            <span class="detail-badge position-absolute start-50 translate-middle shadow badge rounded bg-secondary">
                                Drivetrain
                            </span>
                        </span>
                    </div>
                </div>
        `;
        },
        getQuickFilterText: (params) => {
            const { Year, Make, Model, VehicleStyle, Stock } = params.data;
            return `${Year} ${Make} ${Model} ${VehicleStyle} ${Stock}`;
        }
    },
    { headerName: "Stock", field: "Stock", filter: true, width: 120 },
    { headerName: "GTX", field: "LocationCode", filter: true, width: 100  },
    {
        headerName: 'Story',
        field: 'Story',
        width: 80,
        cellRenderer: (params) => {
            if (params.data.Story != null) {
                const { Title, HtmlContent } = params.data.Story;
                var showCheck = "";
                if (Title === null) {
                    showCheck = "visually-hidden"
                }
                return `
                <style>.p-story {font-size: 10px; margin-top: -15px;}</style>
                <i class="bi bi-check-lg ${showCheck}"></i>
                `
            }
            else {
                return `
                `;
            }
        },
        filter: false,
        sortable: true,
    },
    {
        headerName: '',
        field: 'action',
        cellRenderer: actionsRenderer,
        filter: false,
        sortable: false
    }
]
const gridOptions = {
    rowData: @Html.Raw(Json.Encode(Model.Inventory.Vehicles)),
    onGridReady: (params) => {
        gridApi = params.api; // ✅ store reference globally
        gridApi.forEachNode(function (node, index) {
            if (index === 0) {
                node.setSelected(true);
                gridOptions.onRowClicked({ data: node.data, node: node });
            }
        });
    },
    columnDefs: columnDefs,
    rowSelection: "single", // or 'multiple'
    rowHeight: 150, // Set fixed row height in pixels
    suppressRowClickSelection: false, // Allow clicking anywhere in the row
    suppressCellFocus: true, // 🔥 Disable cell selection focus
    pagination: false,
    paginationPageSize: 20,
    paginationPageSizeSelector: [20, 50, 100],
    defaultColDef: {
        sortable: true,
        filter: true,
        resizable: true,
        floatingFilter: false,
        headerClass: 'text-shadow fw-normal td-center'
    },
    onRowClicked: function (event) {
        selectedVehicle = event.data;
        showVehicleDetails(selectedVehicle);
        loadGallery(selectedVehicle);
        setDetails(selectedVehicle.Stock);
    }
};

// Delete Icon renderer
function deleteIconRenderer(params) {
    const icon = document.createElement('span');
    icon.className = 'bi bi-trash fs-5 px-2';
    icon.style.cursor = 'pointer';
    icon.title = `Delete all ${params.data.Images.length} pictures for Stock# ${JSON.stringify(params.data.Stock)}`;

    icon.onclick = () => {
        if (confirm(`Deleting all ${params.data.Images.length} pictures for Stock# ${JSON.stringify(params.data.Stock)}`)) {
            deleteImages(params.data.Stock);
            params.api.applyTransaction({ update: [params.node.data] });
        }
    };
    return icon;
}

// Restory Icon renderer
function reStoryIconRenderer(params) {
    const icon = document.createElement('span');
    icon.className = 'bi bi-book fs-5 px-2';
    icon.style.cursor = 'pointer';
    icon.title = `Create story for Stock# ${JSON.stringify(params.data.Stock)}`;

    icon.onclick = () => {
        createStory(params.data.Stock);
        params.api.applyTransaction({ update: [params.node.data] });
    };
    return icon;
}

// Image Button Renderer
function imageButtonRenderer(params) {
    if (!params.data.Images || params.data.Images.length === 0) {
        return `<img class="grid-image" src="${params.data.Image}"></img>`;
    }

    const wrapper = document.createElement('div');
    wrapper.className = 'd-flex position-relative';

    const image = new Image();;
    image.src = params.data.Image;
    image.className = "grid-image rounded shadow";
    wrapper.appendChild(image)

    if (params.data.Images.length > 0) {
        const badge = document.createElement('span');
        badge.className = 'position-absolute badge rounded-pill m-2 bg-success start-0 fs-6';
        badge.textContent = `${params.data.Images.length} images`;
        wrapper.appendChild(badge);
    }

    return wrapper;
}

function showVehicleDetails(vehicle) {
    $('#vin').val(vehicle.VIN);
    $('#year').val(vehicle.Year);
    $('#make').val(vehicle.Make);
    $('#model').val(vehicle.Model);
    $('#year').val(vehicle.Year);
    $('#price').val(vehicle.RetailPrice);
    $('#mileage').val(vehicle.Mileage);
    $('#style').val(vehicle.VehicleStyle);
    $('#type').val(vehicle.VehicleType);
    $('#stock').val(vehicle.Stock);
    $('#title').val(vehicle.Story?.Title);
    const editor = tinymce.get("story");
    if (editor) {
        editor.setContent(vehicle?.Story?.HtmlContent || "");
    }

    $("#galery-tab").text(`Gallery (${vehicle.Images.length})`);
}


    // Show Bootstrap modal with images
function showOverlayModal(id) {
    if (stock) {
        showSpinner($("#inventoryOverlay"));
        $.get(`${root}Majordome/OverlayModal`, { id })
            .done(function (html) {
                $("#vehicle-overlay").html(html);
                $("#overlayModal").modal("show");
                hideSpinner($("#inventoryOverlay"));
            })
    };
}
</script>
