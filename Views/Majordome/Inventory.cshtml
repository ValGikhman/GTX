@model GTX.Models.BaseModel
<head>
    <!-- Includes all JS & CSS for the JavaScript Data Grid -->
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community@31.3.1/dist/ag-grid-community.min.js"></script>
    <!-- Lightbox2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/lightbox2@2/dist/css/lightbox.min.css" rel="stylesheet" />

    <!-- Lightbox2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/lightbox2@2/dist/js/lightbox.min.js"></script>
</head>

<style>
    .ag-paging-panel {
        justify-content: left !important;
    }
</style>
<div id="spinnerOverlay" class="spinner-overlay spinner-hidden">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Working...</span>
    </div>
</div>
<div class="container-fluid">
    <h2 class="mb-4">Inventory Management (Shmeizer)</h2>
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="inventory-tab" data-bs-toggle="tab" data-bs-target="#inventory" type="button" role="tab">
                Inventory
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="details-tab" data-bs-toggle="tab" data-bs-target="#details" type="button" role="tab">
                Details
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="galery-tab" data-bs-toggle="tab" data-bs-target="#galery" type="button" role="tab">
                Galery
            </button>
        </li>
    </ul>

    <div class="tab-content p-3 border border-top-0 well " id="myTabContent">
        <!-- Inventory Tab -->
        <div class="tab-pane fade show active" id="inventory" role="tabpanel" style="height: 640px;">
            <div id="myGrid" class="ag-theme-alpine mx-auto" style="height: 580px;">
                <span>@{ Html.RenderPartial("_FilterByTerm"); }</span>
            </div>
        </div>

        <!-- Details Tab -->
        <div class="tab-pane fade mb-2" id="details" role="tabpanel">
            <form id="detailsForm" name="detailsForm" novalidate autocomplete="off" class="w-100">
                <div class="mb-2">
                    @Html.Label("Stock", new { @class = "text-shadow" })
                    <input id="stock" class="form-control shadow w-25" placeholder="Style" />
                </div>
                <div class="mb-2">
                    @Html.Label("Year", new { @class = "text-shadow" })
                    <input id="year" class="form-control shadow w-25" placeholder="Year" />
                </div>
                <div class="mb-2">
                    @Html.Label("Make", new { @class = "text-shadow" })
                    <input id="make" class="form-control shadow w-25" placeholder="Make" />
                </div>

                <div class="mb-2">
                    @Html.Label("Model", new { @class = "text-shadow" })
                    <input id="model" class="form-control shadow w-25" placeholder="Model" />
                </div>

                <div class="mb-2">
                    @Html.Label("Mileage", new { @class = "text-shadow" })
                    <input id="mileage" class="form-control shadow w-25" placeholder="Mileage" />
                </div>

                <div class="mb-2">
                    @Html.Label("Price", new { @class = "text-shadow" })
                    <input id="price" class="form-control shadow w-25" placeholder="Price" />
                </div>

                <div class="mb-2">
                    @Html.Label("Style", new { @class = "text-shadow" })
                    <input id="style" class="form-control shadow w-25" placeholder="Style" />
                </div>

                <div class="mb-2">
                    @Html.Label("Type", new { @class = "text-shadow" })
                    <input id="type" class="form-control shadow w-25" placeholder="Type" />
                </div>

                <div class="d-flex justify-content-center p-3">
                    <button id="saveDetails" type="submit" class="btn btn-secondary shadow w-50"><i class="bi bi-send"></i> Send</button>
                </div>
            </form>
        </div>

        <div class="tab-pane fade" id="galery" role="tabpanel">
            <button id="upload" class="btn btn-light shadow">Upload Images</button>
            <input type="file" id="fileInput" class="d-none" multiple accept="image/*">
            <div id="galery-content" class="container-fluid my-2">
                <div id="sortable-gallery" class="row">
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal modal-xl fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-fullscreen-lg-down">
        <div class="modal-content" id="vehicle-details">
        </div>
    </div>
</div>

<template id="actions">
    <button type="button" id="btnReStoryAll" class="btn btn-light shadow">Restory all</button>
</template>

<input type="hidden" id="currentVehicle"/>
<script type="text/javascript">

$(function () {
    var grid = document.querySelector('#myGrid');
    agGrid.createGrid(grid, gridOptions);

    $(document).on("click", ".delete-image", function () {
        var file = $(this).data("file");
        if (confirm(`Do you want to delete this file?`)) {
            deleteImage(file, this);
        }
    });

    $(".ag-column-last").html($("#actions").html());

    $("#btnReStoryAll").on("click", function () {
        reStoryAll();
    });

    $("#filterLiked").hide();

    $("#upload").on("click", function () {
        $('#fileInput').click();
    });

    $("#fileInput").on("change", function () {
        const files = Array.from(fileInput.files);
        const stock = $("#stock").val();

        if (files.length > 0) {
            uploadFiles(stock, fileInput);
        }
    });

    $("#vin")
        .on("blur", function () {
            const vin = $(this).val();
            if (vin.length > 0) {
                decodeVin(vin);
            }
        })
        .on("keydown", function (e) {
            if (e.key === "Enter") {
                e.preventDefault();
                const vin = $(this).val();
                if (vin.length > 0) {
                    decodeVin(vin);
                }
            }
        }).focus();

    $("#sortable-gallery").sortable({
        items: ".gallery-item",
        update: function (event, ui) {
            var sorted = [];
            $(".gallery-item").each(function () {
                sorted.push($(this).data("filename"));
            });

@*            $.post('@Url.Action("SaveOrder", "Gallery")', { order: sorted });*@
        }
    });

    window.addEventListener('resize', function () {
        gridOptions.api.sizeColumnsToFit();
    });

});

let gridApi = null;

const columnDefs = [
    {
        headerName: 'Images',
        field: 'images',
        cellRenderer: imageButtonRenderer,
        filter: false,
        sortable: false
    },
    {
        headerName: "Vehicle",
        filter: false,
        field: "Vehicle", // You can use any placeholder field
        autoHeight: true,
        sortable: true,
        comparator: (valueA, valueB, nodeA, nodeB) => {
            const a = `${nodeA.data.Year} ${nodeA.data.Make} ${nodeA.data.Model}`.toLowerCase();
            const b = `${nodeB.data.Year} ${nodeB.data.Make} ${nodeB.data.Model}`.toLowerCase();

            if (a < b) return -1;
            if (a > b) return 1;
            return 0;
        },
        cellRenderer: (params) => {
            const { Year, Make, Model, VehicleStyle, Mileage, RetailPrice } = params.data;
            var formattedPrice = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
            }).format(RetailPrice);

            var formattedMileage = new Intl.NumberFormat('en-US').format(Mileage);
            return `
                <div><h7>${Year} ${Make}</h7></div>
                <div style="margin-top: -15px;"><h8>${Model} ${VehicleStyle}</h8></div>
                <div style="margin-top: -15px;"><h8>Miles: ${formattedMileage} Price:${formattedPrice}</h8></div>
        `;
        },
        getQuickFilterText: (params) => {
            const { Year, Make, Model, VehicleStyle, Stock } = params.data;
            return `${Year} ${Make} ${Model} ${VehicleStyle} ${Stock}`;
        }
    },
    { headerName: "Stock", field: "Stock", filter: false, width: 120 },
    { headerName: "GTX", field: "LocationCode", filter: false, width: 70  },
    {
        headerName: 'Story',
        field: 'Story',
        width: 400,
        cellRenderer: (params) => {
            if (params.data.Story != null) {
                const { Title, HtmlContent } = params.data.Story;
                return `
                <style>.p-story {font-size: 10px; margin-top: -15px;}</style>
                <div><h7>${Title}</h7></div>
                `
            }
            else {
                return `
                    <h7>No story created</h7>
                `;
            }
        },
        filter: false,
        sortable: true,
        comparator: (valueA, valueB, nodeA, nodeB) => {
            const a = `${nodeA.data.Story.Title}`.toLowerCase();
            const b = `${nodeB.data.Story.Title}`.toLowerCase();

            if (a < b) return -1;
            if (a > b) return 1;
            return 0;
        },
    },
    {
        headerName: '',
        field: 'action',
        cellRenderer: actionsRenderer,
        filter: false,
        sortable: false
    }
]
const gridOptions = {
    rowData: @Html.Raw(Json.Encode(Model.Inventory.Vehicles)),
    onGridReady: (params) => {
        gridApi = params.api; // ✅ store reference globally
    },
    columnDefs: columnDefs,
    rowSelection: 'single', // or 'multiple'
    suppressRowClickSelection: false, // Allow clicking anywhere in the row
    suppressCellFocus: true, // 🔥 Disable cell selection focus
    pagination: true,
    paginationPageSize: 20,
    paginationPageSizeSelector: [20, 50, 100],
    defaultColDef: {
        sortable: true,
        filter: true,
        resizable: true,
        floatingFilter: false,
        headerClass: 'text-shadow fw-normal td-center'
    },
    onRowClicked: function (event) {
        showVehicleDetails(event.data);
        loadGallery(event.data);
    }
};

// Delete Icon renderer
function deleteIconRenderer(params) {
    const icon = document.createElement('span');
    icon.className = 'bi bi-trash fs-5 px-2';
    icon.style.cursor = 'pointer';
    icon.title = `Delete all ${params.data.Images.length} pictures for Stock# ${JSON.stringify(params.data.Stock)}`;

    icon.onclick = () => {
        if (confirm(`Deleting all ${params.data.Images.length} pictures for Stock# ${JSON.stringify(params.data.Stock)}`)) {
            deleteImages(params.data.Stock);
            params.api.applyTransaction({ update: [params.node.data] });
        }
    };
    return icon;
}

// Restory Icon renderer
function reStoryIconRenderer(params) {
    const icon = document.createElement('span');
    icon.className = 'bi bi-book fs-5 px-2';
    icon.style.cursor = 'pointer';
    icon.title = `Create story for Stock# ${JSON.stringify(params.data.Stock)}`;

    icon.onclick = () => {
        createStory(params.data.Stock);
        params.api.applyTransaction({ update: [params.node.data] });
    };
    return icon;
}

// Image Button Renderer
function imageButtonRenderer(params) {
    if (!params.data.Images || params.data.Images.length === 0) {
        return `<img src="${params.data.Image}"></img>`;
    }

    const wrapper = document.createElement('div');
    wrapper.className = 'position-relative d-inline-block';

    const image = new Image();;
    image.src = params.data.Image;
    wrapper.appendChild(image)

    if (params.data.Images.length > 0) {
        const badge = document.createElement('span');
        badge.className = 'position-absolute badge rounded-pill bg-success start-25';
        badge.textContent = `${params.data.Images.length} images`;
        wrapper.appendChild(badge);
    }

    return wrapper;
}

function storyRenderer(params) {
    if (!params.data.Story) {
        return ""
    }

    const wrapper = document.createElement('div');
    wrapper.className = 'position-relative d-inline-block';

    const title = document.createElement('span');
    title.className = 'position-absolute badge rounded-pill bg-success';
    title.textContent = params.data.Story.Title;
    wrapper.appendChild(title);

    return wrapper;
}

function showVehicleDetails(vehicle) {
    $('#year').val(vehicle.Year);
    $('#make').val(vehicle.Make);
    $('#model').val(vehicle.Model);
    $('#year').val(vehicle.Year);
    $('#price').val(vehicle.RetailPrice);
    $('#mileage').val(vehicle.Mileage);
    $('#style').val(vehicle.VehicleStyle);
    $('#type').val(vehicle.VehicleType);
    $('#stock').val(vehicle.Stock);
}

</script>
