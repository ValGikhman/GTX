@model GTX.Models.BaseModel
<head>
    <!-- Includes all JS & CSS for the JavaScript Data Grid -->
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community@31.3.1/dist/ag-grid-community.min.js"></script>
</head>

<style>
    .ag-paging-panel {
        justify-content: left !important;
    }
</style>

<div class="d-flex justify-content-center vh-75 p-5 well shadow">
    <div id="myGrid" class="ag-theme-alpine w-75" style="height: 80vh;"></div>
</div>

<div class="modal modal-xl fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-fullscreen-lg-down">
        <div class="modal-content" id="vehicle-details">

        </div>
    </div>
</div>


<script type="text/javascript">
    let gridApi = null;

    const columnDefs = [
        {
            headerName: 'Images',
            field: 'images',
            width: 110,
            cellRenderer: imageButtonRenderer,
            filter: false,
            sortable: false
        },
        { headerName: "Stock", field: "Stock", width: 120 },
        { headerName: "Year", field: "Year", width: 80 },
        { headerName: "Make", field: "Make"},
        { headerName: "Model", field: "Model" },
        { headerName: "VehicleStyle", field: "VehicleStyle" },
        {
            headerName: "Upload",
            field: "upload",
            cellRenderer: fileUploadRenderer,
            filter: false,
            sortable: false,
            width: 110
        }
    ]
    const gridOptions = {
        rowData: @Html.Raw(Json.Encode(Model.Inventory.Vehicles)),
        onGridReady: (params) => {
            gridApi = params.api; // ✅ store reference globally
        },
        columnDefs: columnDefs,
        pagination: true,
        paginationPageSize: 20,
        paginationPageSizeSelector: [20, 50, 100],
        defaultColDef: {
            sortable: true,
            filter: true,
            resizable: true,
            headerClass: 'text-shadow fw-normal td-center'
        },
        rowHeight: 30
    };

    // Image Button Renderer
    function imageButtonRenderer(params) {
        if (!params.data.Images || params.data.Images.length === 0) return `<img src="${params.data.Image}"></img>`;

        const button = document.createElement('button');
        button.className = 'badge bg-secondary text-shadow fw-normal';
        button.style.cursor = 'pointer';

        button.textContent = `Show (${params.data.Images.length})`;
        button.onclick = () => showImageModal(params.data.Stock);
        return button;
    }

    // Show Bootstrap modal with images
    function showImageModal(stock) {
        if (stock) {
            $.get(`${root}Inventory/Details`, { "stock": stock })
                .done(function (html) {
                    $("#vehicle-details").html(html);
                    $("#detailsModal").modal("show");
                })
        };
    }

    $(function () {
        var grid = document.querySelector('#myGrid'); /// $("#myGrid");
        agGrid.createGrid(grid, gridOptions);
    });

    // File upload jazz
    function fileUploadRenderer(params) {
        const container = document.createElement('div');

        const fileInput = document.createElement('input');
        fileInput.type = 'file';
        fileInput.multiple = true;
        fileInput.style.display = 'none';

        const button = document.createElement('button');
        button.innerText = 'Upload';
        button.className = 'badge bg-secondary text-shadow fw-normal';
        button.style.cursor = 'pointer';

        button.addEventListener('click', () => {
            fileInput.click(); // open dialog
        });

        fileInput.addEventListener('change', () => {
            const files = Array.from(fileInput.files);
            if (files.length > 0) {
                uploadFiles(params.data.Stock, fileInput);
            }
        });

        container.appendChild(button);
        container.appendChild(fileInput);
        return container;
    }


    function uploadFiles(stock, input) {
        const files = input.files;
        if (files.length === 0) return;

        const formData = new FormData();
        for (let i = 0; i < files.length; i++) {
            formData.append("files", files[i]);  // "files" is the key that backend must match
        }
        formData.append("stock", stock);

        fetch("/Majordome/Upload", {
            method: "POST",
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    fetch('/Majordome/GetUpdatedItems') // your MVC controller
                      .then(res => res.json())
                        .then(data => {
                            gridApi.setRowData(data);
                      });
                    alert(`Uploaded ${files.length} file(s) for ${stock}`);
                } else {
                    alert("Upload failed.");
                }
            })
            .catch(error => {
                alert(error);
            });
    }
</script>