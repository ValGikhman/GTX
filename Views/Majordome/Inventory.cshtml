@model GTX.Models.BaseModel
<head>
    <!-- Includes all JS & CSS for the JavaScript Data Grid -->
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community@31.3.1/dist/ag-grid-community.min.js"></script>
</head>

<style>
    .ag-paging-panel {
        justify-content: left !important;
    }
</style>

<div class="d-flex justify-content-center p-3">
    <div id="myGrid" class="ag-theme-alpine" style="height: 77vh; width: 65%;">
        <div>@{ Html.RenderPartial("_FilterByTerm"); }</div>
    </div>
</div>

<div class="modal modal-xl fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-fullscreen-lg-down">
        <div class="modal-content" id="vehicle-details">

        </div>
    </div>
</div>


<script type="text/javascript">

    $(function () {
        var grid = document.querySelector('#myGrid'); /// $("#myGrid");
        agGrid.createGrid(grid, gridOptions);
    });

    let gridApi = null;

    const columnDefs = [
        {
            headerName: 'Images',
            field: 'images',
            width: 110,
            cellRenderer: imageButtonRenderer,
            filter: false,
            sortable: false
        },
        { headerName: "Stock", field: "Stock", width: 120 },
        { headerName: "LC", field: "LocationCode", width: 60 },
        { headerName: "Year", field: "Year", width: 80 },
        { headerName: "Make", field: "Make"},
        { headerName: "Model", field: "Model" },
        { headerName: "VehicleStyle", field: "VehicleStyle" },
        {       headerName: '',
                field: 'action',
                cellRenderer: actionsRenderer,
                width: 100,
                filter: false,
                sortable: false
        }
    ]
    const gridOptions = {
        rowData: @Html.Raw(Json.Encode(Model.Inventory.Vehicles)),
        onGridReady: (params) => {
            gridApi = params.api; // ✅ store reference globally
        },
        columnDefs: columnDefs,
        pagination: true,
        paginationPageSize: 20,
        paginationPageSizeSelector: [20, 50, 100],
        defaultColDef: {
            sortable: true,
            filter: true,
            resizable: true,
            floatingFilter: false,
            headerClass: 'text-shadow fw-normal td-center'
        },
        rowHeight: 30
    };

    // Delete Icon renderer
    function deleteIconRenderer(params) {
        const icon = document.createElement('span');
        icon.className = 'bi bi-trash fs-5 px-2';
        icon.style.cursor = 'pointer';
        icon.title = `Delete all ${params.data.Images.length} pictures for Stock# ${JSON.stringify(params.data.Stock)}`;

        icon.onclick = () => {
            alert(`Deleting all ${params.data.Images.length} pictures for Stock# ${JSON.stringify(params.data.Stock)}`);
            deleteImages(params.data.Stock);
            params.api.applyTransaction({ update: [params.node.data] });
        };
        return icon;
    }

    // Show Bootstrap modal with images
    function deleteImages(stock) {
        $.post(`${root}Majordome/DeleteImages`, { stock })
            .done(function (response) {
                fetch('/Majordome/GetUpdatedItems')
                    .then(res => res.json())
                    .then(data => {
                        gridApi.setRowData(data);
                    });
            })
    };

    // Image Button Renderer
    function imageButtonRenderer(params) {
        if (!params.data.Images || params.data.Images.length === 0) {
            return `<img src="${params.data.Image}"></img>`;
        }

        const wrapper = document.createElement('div');
        wrapper.className = 'position-relative d-inline-block';

        const icon = document.createElement('i');
        icon.className = 'bi bi-images fs-3'; // bell icon, font size 3
        icon.style.cursor = 'pointer';
        icon.title = `Show all ${params.data.Images.length} picture(s) for Stock# ${JSON.stringify(params.data.Stock)}`;
        icon.onclick = () => showImageModal(params.data.Stock);
        wrapper.appendChild(icon);

        if (params.data.Images.length > 0) {
            const badge = document.createElement('span');
            badge.className = 'position-absolute badge rounded-pill bg-success';
            badge.textContent = params.data.Images.length;

            const count = document.createElement('span');
            count.className = 'visually-hidden';
            count.textContent = `${params.data.Images.length} images`;
            badge.appendChild(count);

            wrapper.appendChild(badge);
        }

        return wrapper;
    }

    // Show Bootstrap modal with images
    function showImageModal(stock) {
        if (stock) {
            $.get(`${root}Inventory/Details`, { "stock": stock })
                .done(function (html) {
                    $("#vehicle-details").html(html);
                    $("#detailsModal").modal("show");
                })
        };
    }

    // File upload jazz
    function actionsRenderer(params) {
        const container = document.createElement('div');
        const fileInput = document.createElement('input');

        fileInput.type = 'file';
        fileInput.multiple = true;
        fileInput.style.display = 'none';

        const icon = document.createElement('span');
        icon.className = 'bi bi-upload fs-5 px-2';
        icon.style.cursor = 'pointer';
        icon.title = `Upload images for Stock# ${JSON.stringify(params.data.Stock)}`;

        icon.onclick = () => {
            fileInput.click();
        };

        fileInput.addEventListener('change', () => {
            const files = Array.from(fileInput.files);
            if (files.length > 0) {
                uploadFiles(params.data.Stock, fileInput);
            }
        });

        container.appendChild(icon);
        container.appendChild(fileInput);
        if (params.data.Images && params.data.Images.length > 0) {
            container.appendChild(deleteIconRenderer(params));
        }

        return container;
    }

    function uploadFiles(stock, input) {
        const files = input.files;
        if (files.length === 0) return;

        const formData = new FormData();
        for (let i = 0; i < files.length; i++) {
            formData.append("files", files[i]);
        }
        formData.append("stock", stock);

        fetch("/Majordome/Upload", {
            method: "POST",
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    fetch('/Majordome/GetUpdatedItems')
                        .then(res => res.json())
                        .then(data => {
                            gridApi.setRowData(data);
                        });
                    alert(`Uploaded ${files.length} file(s) for ${stock}`);
                } else {
                    alert("Upload failed.");
                }
            })
            .catch(error => {
                alert(error);
            });
    }

</script>