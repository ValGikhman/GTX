@model GTX.Models.BaseModel
<head>
    <!-- Includes all JS & CSS for the JavaScript Data Grid -->
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community@31.3.1/dist/ag-grid-community.min.js"></script>
</head>

<style>
    .ag-paging-panel {
        justify-content: left !important;
    }
</style>

<div class="container mx-auto">
    <h2 class="mb-4">Inventory Management (Shmeizer)</h2>
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="inventory-tab" data-bs-toggle="tab" data-bs-target="#inventory" type="button" role="tab">
                Inventory
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="details-tab" data-bs-toggle="tab" data-bs-target="#details" type="button" role="tab">
                Details
            </button>
        </li>
    </ul>

    <div class="tab-content p-3 border border-top-0 well " id="myTabContent">
        <!-- Inventory Tab -->
        <div class="tab-pane fade show active" id="inventory" role="tabpanel" style="height: 640px;">
            <div id="myGrid" class="ag-theme-alpine mx-auto" style="height: 580px;">
                <span>@{ Html.RenderPartial("_FilterByTerm"); }</span>
             </div>
        </div>

        <!-- Details Tab -->
        <div class="tab-pane fade" id="details" role="tabpanel">
            <h5>Vehicle details</h5>
            <div id="details-content" class="mb-2">

            </div>
        </div>
    </div>
</div>

<div class="modal modal-xl fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModal" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable modal-fullscreen-lg-down">
        <div class="modal-content" id="vehicle-details">
        </div>
    </div>
</div>

<template id="addNew">
    <button type="button" id="btnAddNew" class="btn btn-light shadow">Add new vehicle</button>
</template>

<script type="text/javascript">

$(function () {
    var grid = document.querySelector('#myGrid');
    agGrid.createGrid(grid, gridOptions);

    $(".ag-column-last").html($("#addNew").html());

    $("#btnAddNew").on("click", function () {
        $("#details-tab").tab("show");
        $('#details-content').html(
            `<h4>Add new vehicle</h4>
            <input type="search" id="vin" class="form-control w-25 mb-3 shadow" placeholder="Search for VIN #">
            `
        );

        $("#vin")
            .on("blur", function () {
                const vin = $(this).val();
                if (vin.length > 0) {
                    decodeVin(vin);
                }
            })
            .on("keydown", function (e) {
                if (e.key === "Enter") {
                    e.preventDefault();
                    const vin = $(this).val();
                    if (vin.length > 0) {
                        decodeVin(vin);
                    }
                }
            }).focus();
    });
});

let gridApi = null;

const columnDefs = [
    {
        headerName: 'Images',
        field: 'images',
        width: 110,
        cellRenderer: imageButtonRenderer,
        filter: false,
        sortable: false
    },
    {
        headerName: "Vehicle",
        filter: false,
        field: "Vehicle", // You can use any placeholder field
        autoHeight: true,
        sortable: true,
        comparator: (valueA, valueB, nodeA, nodeB) => {
            const a = `${nodeA.data.Year} ${nodeA.data.Make} ${nodeA.data.Model}`.toLowerCase();
            const b = `${nodeB.data.Year} ${nodeB.data.Make} ${nodeB.data.Model}`.toLowerCase();

            if (a < b) return -1;
            if (a > b) return 1;
            return 0;
        },
        cellRenderer: (params) => {
            const { Year, Make, Model, VehicleStyle } = params.data;
            return `
                <div><h7>${Year} ${Make}</h7></div>
                <div style="margin-top: -15px;"><h8>${Model} ${VehicleStyle}</h8></div>
        `;
        },
        getQuickFilterText: (params) => {
            const { Year, Make, Model, VehicleStyle, Stock, LocationCode } = params.data;
            return `${Year} ${Make} ${Model} ${VehicleStyle} ${Stock} ${LocationCode}`;
        }
    },
    { headerName: "Stock", field: "Stock", filter: false },
    { headerName: "LC", field: "LocationCode", filter: false },
    {
        headerName: '',
        field: 'action',
        cellRenderer: actionsRenderer,
        filter: false,
        sortable: false
    }
]
const gridOptions = {
    rowData: @Html.Raw(Json.Encode(Model.Inventory.Vehicles)),
    onGridReady: (params) => {
        gridApi = params.api; // ✅ store reference globally
    },
    columnDefs: columnDefs,
    rowSelection: 'single', // or 'multiple'
    suppressRowClickSelection: false, // Allow clicking anywhere in the row
    suppressCellFocus: true, // 🔥 Disable cell selection focus
    pagination: true,
    paginationPageSize: 20,
    paginationPageSizeSelector: [20, 50, 100],
    defaultColDef: {
        sortable: true,
        filter: true,
        resizable: true,
        floatingFilter: false,
        headerClass: 'text-shadow fw-normal td-center'
    },
    onRowDoubleClicked: function (event) {
        $('#details-tab').tab('show');
        $('#details-content').html(
            `<h4>Details for ${event.data.Year} ${event.data.Make} ${event.data.Model} ${event.data.VehicleStyle}</h4>`
        );
    },
};

// Delete Icon renderer
function deleteIconRenderer(params) {
    const icon = document.createElement('span');
    icon.className = 'bi bi-trash fs-5 px-2';
    icon.style.cursor = 'pointer';
    icon.title = `Delete all ${params.data.Images.length} pictures for Stock# ${JSON.stringify(params.data.Stock)}`;

    icon.onclick = () => {
        alert(`Deleting all ${params.data.Images.length} pictures for Stock# ${JSON.stringify(params.data.Stock)}`);
        deleteImages(params.data.Stock);
        params.api.applyTransaction({ update: [params.node.data] });
    };
    return icon;
}

// Show Bootstrap modal with images
function deleteImages(stock) {
    $.post(`${root}Majordome/DeleteImages`, { stock })
        .done(function (response) {
            fetch('/Majordome/GetUpdatedItems')
                .then(res => res.json())
                .then(data => {
                    gridApi.setRowData(data);
                });
        })
};

// Image Button Renderer
function imageButtonRenderer(params) {
    if (!params.data.Images || params.data.Images.length === 0) {
        return `<img src="${params.data.Image}"></img>`;
    }

    const wrapper = document.createElement('div');
    wrapper.className = 'position-relative d-inline-block';

    const icon = document.createElement('i');
    icon.className = 'bi bi-images fs-3'; // bell icon, font size 3
    icon.style.cursor = 'pointer';
    icon.title = `Show all ${params.data.Images.length} picture(s) for Stock# ${JSON.stringify(params.data.Stock)}`;
    icon.onclick = () => showImageModal(params.data.Stock);
    wrapper.appendChild(icon);

    if (params.data.Images.length > 0) {
        const badge = document.createElement('span');
        badge.className = 'position-absolute badge rounded-pill bg-success';
        badge.textContent = params.data.Images.length;

        const count = document.createElement('span');
        count.className = 'visually-hidden';
        count.textContent = `${params.data.Images.length} images`;
        badge.appendChild(count);

        wrapper.appendChild(badge);
    }

    return wrapper;
}

// Show Bootstrap modal with images
function showImageModal(stock) {
    if (stock) {
        $.get(`${root}Inventory/Details`, { "stock": stock })
            .done(function (html) {
                $("#vehicle-details").html(html);
                $("#detailsModal").modal("show");
            })
    };
}

// File upload jazz
function actionsRenderer(params) {
    const container = document.createElement('div');
    const fileInput = document.createElement('input');

    fileInput.type = 'file';
    fileInput.multiple = true;
    fileInput.style.display = 'none';

    const icon = document.createElement('span');
    icon.className = 'bi bi-upload fs-5 px-2';
    icon.style.cursor = 'pointer';
    icon.title = `Upload images for Stock# ${JSON.stringify(params.data.Stock)}`;

    icon.onclick = () => {
        fileInput.click();
    };

    fileInput.addEventListener('change', () => {
        const files = Array.from(fileInput.files);
        if (files.length > 0) {
            uploadFiles(params.data.Stock, fileInput);
        }
    });

    container.appendChild(icon);
    container.appendChild(fileInput);
    if (params.data.Images && params.data.Images.length > 0) {
        container.appendChild(deleteIconRenderer(params));
    }

    return container;
}

function uploadFiles(stock, input) {
    const files = input.files;
    if (files.length === 0) return;

    const formData = new FormData();
    for (let i = 0; i < files.length; i++) {
        formData.append("files", files[i]);
    }
    formData.append("stock", stock);

    fetch("/Majordome/Upload", {
        method: "POST",
        body: formData
    })
        .then(response => {
            if (response.ok) {
                fetch('/Majordome/GetUpdatedItems')
                    .then(res => res.json())
                    .then(data => {
                        gridApi.setRowData(data);
                    });
                    alert(`Uploaded ${files.length} file(s) for ${stock}`);
                } else {
                    alert("Upload failed.");
                }
        })
        .catch(error => {
            alert(error);
        });
    }

    function decodeVin(vin) {
        fetch('/Inventory/DecodeVin', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ vin: vin })
        })
        .then(res => res.json())
        .then(data => {
            console.log(data);
            $("#details-content").html(data.Error);
        });
    }
</script>
